---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: clusters.vspherecomputecluster.vsphere.jet.crossplane.io
spec:
  group: vspherecomputecluster.vsphere.jet.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - vspherejet
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    singular: cluster
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Cluster is the Schema for the Clusters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterSpec defines the desired state of Cluster
            properties:
              deletionPolicy:
                default: Delete
                description: DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource.
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  customAttributes:
                    additionalProperties:
                      type: string
                    description: A list of custom attributes to set on this resource.
                    type: object
                  datacenterId:
                    description: The managed object ID of the datacenter to put the
                      cluster in.
                    type: string
                  dpmAutomationLevel:
                    description: The automation level for host power operations in
                      this cluster. Can be one of manual or automated.
                    type: string
                  dpmEnabled:
                    description: Enable DPM support for DRS. This allows you to dynamically
                      control the power of hosts depending on the needs of virtual
                      machines in the cluster. Requires that DRS be enabled.
                    type: boolean
                  dpmThreshold:
                    description: A value between 1 and 5 indicating the threshold
                      of load within the cluster that influences host power operations.
                      This affects both power on and power off operations - a lower
                      setting will tolerate more of a surplus/deficit than a higher
                      setting.
                    type: number
                  drsAdvancedOptions:
                    additionalProperties:
                      type: string
                    description: Advanced configuration options for DRS and DPM.
                    type: object
                  drsAutomationLevel:
                    description: The default automation level for all virtual machines
                      in this cluster. Can be one of manual, partiallyAutomated, or
                      fullyAutomated.
                    type: string
                  drsEnablePredictiveDrs:
                    description: When true, enables DRS to use data from vRealize
                      Operations Manager to make proactive DRS recommendations.
                    type: boolean
                  drsEnableVmOverrides:
                    description: When true, allows individual VM overrides within
                      this cluster to be set.
                    type: boolean
                  drsEnabled:
                    description: Enable DRS for this cluster.
                    type: boolean
                  drsMigrationThreshold:
                    description: A value between 1 and 5 indicating the threshold
                      of imbalance tolerated between hosts. A lower setting will tolerate
                      more imbalance while a higher setting will tolerate less.
                    type: number
                  drsScaleDescendantsShares:
                    description: Enable scalable shares for all descendants of this
                      cluster.
                    type: string
                  folder:
                    description: The name of the folder to locate the cluster in.
                    type: string
                  forceEvacuateOnDestroy:
                    description: Force removal of all hosts in the cluster during
                      destroy and make them standalone hosts. Use of this flag mainly
                      exists for testing and is not recommended in normal use.
                    type: boolean
                  haAdmissionControlFailoverHostSystemIds:
                    description: When ha_admission_control_policy is failoverHosts,
                      this defines the managed object IDs of hosts to use as dedicated
                      failover hosts. These hosts are kept as available as possible
                      - admission control will block access to the host, and DRS will
                      ignore the host when making recommendations.
                    items:
                      type: string
                    type: array
                  haAdmissionControlHostFailureTolerance:
                    description: The maximum number of failed hosts that admission
                      control tolerates when making decisions on whether to permit
                      virtual machine operations. The maximum is one less than the
                      number of hosts in the cluster.
                    type: number
                  haAdmissionControlPerformanceTolerance:
                    description: The percentage of resource reduction that a cluster
                      of VMs can tolerate in case of a failover. A value of 0 produces
                      warnings only, whereas a value of 100 disables the setting.
                    type: number
                  haAdmissionControlPolicy:
                    description: The type of admission control policy to use with
                      vSphere HA, which controls whether or not specific VM operations
                      are permitted in the cluster in order to protect the reliability
                      of the cluster. Can be one of resourcePercentage, slotPolicy,
                      failoverHosts, or disabled. Note that disabling admission control
                      is not recommended and can lead to service issues.
                    type: string
                  haAdmissionControlResourcePercentageAutoCompute:
                    description: When ha_admission_control_policy is resourcePercentage,
                      automatically determine available resource percentages by subtracting
                      the average number of host resources represented by the ha_admission_control_host_failure_tolerance
                      setting from the total amount of resources in the cluster. Disable
                      to supply user-defined values.
                    type: boolean
                  haAdmissionControlResourcePercentageCpu:
                    description: When ha_admission_control_policy is resourcePercentage,
                      this controls the user-defined percentage of CPU resources in
                      the cluster to reserve for failover.
                    type: number
                  haAdmissionControlResourcePercentageMemory:
                    description: When ha_admission_control_policy is resourcePercentage,
                      this controls the user-defined percentage of memory resources
                      in the cluster to reserve for failover.
                    type: number
                  haAdmissionControlSlotPolicyExplicitCpu:
                    description: When ha_admission_control_policy is slotPolicy, this
                      controls the user-defined CPU slot size, in MHz.
                    type: number
                  haAdmissionControlSlotPolicyExplicitMemory:
                    description: When ha_admission_control_policy is slotPolicy, this
                      controls the user-defined memory slot size, in MB.
                    type: number
                  haAdmissionControlSlotPolicyUseExplicitSize:
                    description: When ha_admission_control_policy is slotPolicy, this
                      setting controls whether or not you wish to supply explicit
                      values to CPU and memory slot sizes. The default is to gather
                      a automatic average based on all powered-on virtual machines
                      currently in the cluster.
                    type: boolean
                  haAdvancedOptions:
                    additionalProperties:
                      type: string
                    description: Advanced configuration options for vSphere HA.
                    type: object
                  haDatastoreApdRecoveryAction:
                    description: When ha_vm_component_protection is enabled, controls
                      the action to take on virtual machines if an APD status on an
                      affected datastore clears in the middle of an APD event. Can
                      be one of none or reset.
                    type: string
                  haDatastoreApdResponse:
                    description: When ha_vm_component_protection is enabled, controls
                      the action to take on virtual machines when the cluster has
                      detected loss to all paths to a relevant datastore. Can be one
                      of disabled, warning, restartConservative, or restartAggressive.
                    type: string
                  haDatastoreApdResponseDelay:
                    description: When ha_vm_component_protection is enabled, controls
                      the delay in seconds to wait after an APD timeout event to execute
                      the response action defined in ha_datastore_apd_response.
                    type: number
                  haDatastorePdlResponse:
                    description: When ha_vm_component_protection is enabled, controls
                      the action to take on virtual machines when the cluster has
                      detected a permanent device loss to a relevant datastore. Can
                      be one of disabled, warning, or restartAggressive.
                    type: string
                  haEnabled:
                    description: Enable vSphere HA for this cluster.
                    type: boolean
                  haHeartbeatDatastoreIds:
                    description: The list of managed object IDs for preferred datastores
                      to use for HA heartbeating. This setting is only useful when
                      ha_heartbeat_datastore_policy is set to either userSelectedDs
                      or allFeasibleDsWithUserPreference.
                    items:
                      type: string
                    type: array
                  haHeartbeatDatastorePolicy:
                    description: The selection policy for HA heartbeat datastores.
                      Can be one of allFeasibleDs, userSelectedDs, or allFeasibleDsWithUserPreference.
                    type: string
                  haHostIsolationResponse:
                    description: The action to take on virtual machines when a host
                      has detected that it has been isolated from the rest of the
                      cluster. Can be one of none, powerOff, or shutdown.
                    type: string
                  haHostMonitoring:
                    description: Global setting that controls whether vSphere HA remediates
                      VMs on host failure. Can be one of enabled or disabled.
                    type: string
                  haVmComponentProtection:
                    description: Controls vSphere VM component protection for virtual
                      machines in this cluster. This allows vSphere HA to react to
                      failures between hosts and specific virtual machine components,
                      such as datastores. Can be one of enabled or disabled.
                    type: string
                  haVmDependencyRestartCondition:
                    description: The condition used to determine whether or not VMs
                      in a certain restart priority class are online, allowing HA
                      to move on to restarting VMs on the next priority. Can be one
                      of none, poweredOn, guestHbStatusGreen, or appHbStatusGreen.
                    type: string
                  haVmFailureInterval:
                    description: If a heartbeat from a virtual machine is not received
                      within this configured interval, the virtual machine is marked
                      as failed. The value is in seconds.
                    type: number
                  haVmMaximumFailureWindow:
                    description: The length of the reset window in which ha_vm_maximum_resets
                      can operate. When this window expires, no more resets are attempted
                      regardless of the setting configured in ha_vm_maximum_resets.
                      -1 means no window, meaning an unlimited reset time is allotted.
                    type: number
                  haVmMaximumResets:
                    description: The maximum number of resets that HA will perform
                      to a virtual machine when responding to a failure event.
                    type: number
                  haVmMinimumUptime:
                    description: The time, in seconds, that HA waits after powering
                      on a virtual machine before monitoring for heartbeats.
                    type: number
                  haVmMonitoring:
                    description: The type of virtual machine monitoring to use when
                      HA is enabled in the cluster. Can be one of vmMonitoringDisabled,
                      vmMonitoringOnly, or vmAndAppMonitoring.
                    type: string
                  haVmRestartAdditionalDelay:
                    description: Additional delay in seconds after ready condition
                      is met. A VM is considered ready at this point.
                    type: number
                  haVmRestartPriority:
                    description: The default restart priority for affected VMs when
                      vSphere detects a host failure. Can be one of lowest, low, medium,
                      high, or highest.
                    type: string
                  haVmRestartTimeout:
                    description: The maximum time, in seconds, that vSphere HA will
                      wait for virtual machines in one priority to be ready before
                      proceeding with the next priority.
                    type: number
                  hostClusterExitTimeout:
                    description: The timeout for each host maintenance mode operation
                      when removing hosts from a cluster.
                    type: number
                  hostManaged:
                    description: Must be set if cluster enrollment is managed from
                      host resource.
                    type: boolean
                  hostSystemIds:
                    description: The managed object IDs of the hosts to put in the
                      cluster.
                    items:
                      type: string
                    type: array
                  proactiveHaAutomationLevel:
                    description: The DRS behavior for proactive HA recommendations.
                      Can be one of Automated or Manual.
                    type: string
                  proactiveHaEnabled:
                    description: Enables proactive HA, allowing for vSphere to get
                      HA data from external providers and use DRS to perform remediation.
                    type: boolean
                  proactiveHaModerateRemediation:
                    description: The configured remediation for moderately degraded
                      hosts. Can be one of MaintenanceMode or QuarantineMode. Note
                      that this cannot be set to MaintenanceMode when proactive_ha_severe_remediation
                      is set to QuarantineMode.
                    type: string
                  proactiveHaProviderIds:
                    description: The list of IDs for health update providers configured
                      for this cluster.
                    items:
                      type: string
                    type: array
                  proactiveHaSevereRemediation:
                    description: The configured remediation for severely degraded
                      hosts. Can be one of MaintenanceMode or QuarantineMode. Note
                      that this cannot be set to QuarantineMode when proactive_ha_moderate_remediation
                      is set to MaintenanceMode.
                    type: string
                  tags:
                    description: A list of tag IDs to apply to this object.
                    items:
                      type: string
                    type: array
                  vsanDiskGroup:
                    description: A list of disk UUIDs to add to the vSAN cluster.
                    items:
                      properties:
                        cache:
                          description: Cache disk.
                          type: string
                        storage:
                          description: List of storage disks.
                          items:
                            type: string
                          type: array
                      type: object
                    type: array
                  vsanEnabled:
                    description: Whether the VSAN service is enabled for the cluster.
                    type: boolean
                required:
                - datacenterId
                type: object
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: ClusterStatus defines the observed state of Cluster.
            properties:
              atProvider:
                properties:
                  id:
                    type: string
                  resourcePoolId:
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
