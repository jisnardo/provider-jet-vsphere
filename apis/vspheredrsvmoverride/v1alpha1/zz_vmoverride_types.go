/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VMOverrideObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VMOverrideParameters struct {

	// The managed object ID of the cluster.
	// +kubebuilder:validation:Required
	ComputeClusterID *string `json:"computeClusterId" tf:"compute_cluster_id,omitempty"`

	// The automation level for this virtual machine in the cluster. Can be one of manual, partiallyAutomated, or fullyAutomated.
	// +kubebuilder:validation:Optional
	DrsAutomationLevel *string `json:"drsAutomationLevel,omitempty" tf:"drs_automation_level,omitempty"`

	// Enable DRS for this virtual machine.
	// +kubebuilder:validation:Optional
	DrsEnabled *bool `json:"drsEnabled,omitempty" tf:"drs_enabled,omitempty"`

	// The managed object ID of the virtual machine.
	// +kubebuilder:validation:Required
	VirtualMachineID *string `json:"virtualMachineId" tf:"virtual_machine_id,omitempty"`
}

// VMOverrideSpec defines the desired state of VMOverride
type VMOverrideSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VMOverrideParameters `json:"forProvider"`
}

// VMOverrideStatus defines the observed state of VMOverride.
type VMOverrideStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VMOverrideObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VMOverride is the Schema for the VMOverrides API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vspherejet}
type VMOverride struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VMOverrideSpec   `json:"spec"`
	Status            VMOverrideStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VMOverrideList contains a list of VMOverrides
type VMOverrideList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VMOverride `json:"items"`
}

// Repository type metadata.
var (
	VMOverride_Kind             = "VMOverride"
	VMOverride_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VMOverride_Kind}.String()
	VMOverride_KindAPIVersion   = VMOverride_Kind + "." + CRDGroupVersion.String()
	VMOverride_GroupVersionKind = CRDGroupVersion.WithKind(VMOverride_Kind)
)

func init() {
	SchemeBuilder.Register(&VMOverride{}, &VMOverrideList{})
}
