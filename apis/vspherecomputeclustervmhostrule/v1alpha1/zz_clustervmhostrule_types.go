/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterVMHostRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClusterVMHostRuleParameters struct {

	// When this field is used, virtual machines defined in vm_group_name will be run on the hosts defined in this host group.
	// +kubebuilder:validation:Optional
	AffinityHostGroupName *string `json:"affinityHostGroupName,omitempty" tf:"affinity_host_group_name,omitempty"`

	// When this field is used, virtual machines defined in vm_group_name will not be run on the hosts defined in this host group.
	// +kubebuilder:validation:Optional
	AntiAffinityHostGroupName *string `json:"antiAffinityHostGroupName,omitempty" tf:"anti_affinity_host_group_name,omitempty"`

	// The managed object ID of the cluster.
	// +kubebuilder:validation:Required
	ComputeClusterID *string `json:"computeClusterId" tf:"compute_cluster_id,omitempty"`

	// Enable this rule in the cluster.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// When true, prevents any virtual machine operations that may violate this rule.
	// +kubebuilder:validation:Optional
	Mandatory *bool `json:"mandatory,omitempty" tf:"mandatory,omitempty"`

	// The name of the virtual machine group to use with this rule.
	// +kubebuilder:validation:Required
	VMGroupName *string `json:"vmGroupName" tf:"vm_group_name,omitempty"`
}

// ClusterVMHostRuleSpec defines the desired state of ClusterVMHostRule
type ClusterVMHostRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterVMHostRuleParameters `json:"forProvider"`
}

// ClusterVMHostRuleStatus defines the observed state of ClusterVMHostRule.
type ClusterVMHostRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterVMHostRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterVMHostRule is the Schema for the ClusterVMHostRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vspherejet}
type ClusterVMHostRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterVMHostRuleSpec   `json:"spec"`
	Status            ClusterVMHostRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterVMHostRuleList contains a list of ClusterVMHostRules
type ClusterVMHostRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterVMHostRule `json:"items"`
}

// Repository type metadata.
var (
	ClusterVMHostRule_Kind             = "ClusterVMHostRule"
	ClusterVMHostRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterVMHostRule_Kind}.String()
	ClusterVMHostRule_KindAPIVersion   = ClusterVMHostRule_Kind + "." + CRDGroupVersion.String()
	ClusterVMHostRule_GroupVersionKind = CRDGroupVersion.WithKind(ClusterVMHostRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterVMHostRule{}, &ClusterVMHostRuleList{})
}
