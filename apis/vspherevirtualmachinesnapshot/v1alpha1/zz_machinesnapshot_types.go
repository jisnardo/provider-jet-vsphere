/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MachineSnapshotObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MachineSnapshotParameters struct {

	// +kubebuilder:validation:Optional
	Consolidate *bool `json:"consolidate,omitempty" tf:"consolidate,omitempty"`

	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Memory *bool `json:"memory" tf:"memory,omitempty"`

	// +kubebuilder:validation:Required
	Quiesce *bool `json:"quiesce" tf:"quiesce,omitempty"`

	// +kubebuilder:validation:Optional
	RemoveChildren *bool `json:"removeChildren,omitempty" tf:"remove_children,omitempty"`

	// +kubebuilder:validation:Required
	SnapshotName *string `json:"snapshotName" tf:"snapshot_name,omitempty"`

	// +kubebuilder:validation:Required
	VirtualMachineUUID *string `json:"virtualMachineUuid" tf:"virtual_machine_uuid,omitempty"`
}

// MachineSnapshotSpec defines the desired state of MachineSnapshot
type MachineSnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MachineSnapshotParameters `json:"forProvider"`
}

// MachineSnapshotStatus defines the observed state of MachineSnapshot.
type MachineSnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MachineSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MachineSnapshot is the Schema for the MachineSnapshots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vspherejet}
type MachineSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MachineSnapshotSpec   `json:"spec"`
	Status            MachineSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MachineSnapshotList contains a list of MachineSnapshots
type MachineSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MachineSnapshot `json:"items"`
}

// Repository type metadata.
var (
	MachineSnapshot_Kind             = "MachineSnapshot"
	MachineSnapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MachineSnapshot_Kind}.String()
	MachineSnapshot_KindAPIVersion   = MachineSnapshot_Kind + "." + CRDGroupVersion.String()
	MachineSnapshot_GroupVersionKind = CRDGroupVersion.WithKind(MachineSnapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&MachineSnapshot{}, &MachineSnapshotList{})
}
