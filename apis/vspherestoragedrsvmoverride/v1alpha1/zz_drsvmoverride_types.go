/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DrsVMOverrideObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DrsVMOverrideParameters struct {

	// The managed object ID of the datastore cluster.
	// +kubebuilder:validation:Required
	DatastoreClusterID *string `json:"datastoreClusterId" tf:"datastore_cluster_id,omitempty"`

	// Overrides any Storage DRS automation levels for this virtual machine.
	// +kubebuilder:validation:Optional
	SdrsAutomationLevel *string `json:"sdrsAutomationLevel,omitempty" tf:"sdrs_automation_level,omitempty"`

	// Overrides the default Storage DRS setting for this virtual machine.
	// +kubebuilder:validation:Optional
	SdrsEnabled *string `json:"sdrsEnabled,omitempty" tf:"sdrs_enabled,omitempty"`

	// Overrides the intra-VM affinity setting for this virtual machine.
	// +kubebuilder:validation:Optional
	SdrsIntraVMAffinity *string `json:"sdrsIntraVmAffinity,omitempty" tf:"sdrs_intra_vm_affinity,omitempty"`

	// The managed object ID of the virtual machine.
	// +kubebuilder:validation:Required
	VirtualMachineID *string `json:"virtualMachineId" tf:"virtual_machine_id,omitempty"`
}

// DrsVMOverrideSpec defines the desired state of DrsVMOverride
type DrsVMOverrideSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DrsVMOverrideParameters `json:"forProvider"`
}

// DrsVMOverrideStatus defines the observed state of DrsVMOverride.
type DrsVMOverrideStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DrsVMOverrideObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DrsVMOverride is the Schema for the DrsVMOverrides API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vspherejet}
type DrsVMOverride struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DrsVMOverrideSpec   `json:"spec"`
	Status            DrsVMOverrideStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DrsVMOverrideList contains a list of DrsVMOverrides
type DrsVMOverrideList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DrsVMOverride `json:"items"`
}

// Repository type metadata.
var (
	DrsVMOverride_Kind             = "DrsVMOverride"
	DrsVMOverride_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DrsVMOverride_Kind}.String()
	DrsVMOverride_KindAPIVersion   = DrsVMOverride_Kind + "." + CRDGroupVersion.String()
	DrsVMOverride_GroupVersionKind = CRDGroupVersion.WithKind(DrsVMOverride_Kind)
)

func init() {
	SchemeBuilder.Register(&DrsVMOverride{}, &DrsVMOverrideList{})
}
