/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LicenseObservation struct {
	EditionKey *string `json:"editionKey,omitempty" tf:"edition_key,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Total *float64 `json:"total,omitempty" tf:"total,omitempty"`

	Used *float64 `json:"used,omitempty" tf:"used,omitempty"`
}

type LicenseParameters struct {

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Required
	LicenseKey *string `json:"licenseKey" tf:"license_key,omitempty"`
}

// LicenseSpec defines the desired state of License
type LicenseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LicenseParameters `json:"forProvider"`
}

// LicenseStatus defines the observed state of License.
type LicenseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LicenseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// License is the Schema for the Licenses API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vspherejet}
type License struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LicenseSpec   `json:"spec"`
	Status            LicenseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LicenseList contains a list of Licenses
type LicenseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []License `json:"items"`
}

// Repository type metadata.
var (
	License_Kind             = "License"
	License_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: License_Kind}.String()
	License_KindAPIVersion   = License_Kind + "." + CRDGroupVersion.String()
	License_GroupVersionKind = CRDGroupVersion.WithKind(License_Kind)
)

func init() {
	SchemeBuilder.Register(&License{}, &LicenseList{})
}
