/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LibraryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LibraryParameters struct {

	// Optional description of the content library.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Publication configuration for content library.
	// +kubebuilder:validation:Optional
	Publication []PublicationParameters `json:"publication,omitempty" tf:"publication,omitempty"`

	// The name of the content library.
	// +kubebuilder:validation:Required
	StorageBacking []*string `json:"storageBacking" tf:"storage_backing,omitempty"`

	// Publication configuration for content library.
	// +kubebuilder:validation:Optional
	Subscription []SubscriptionParameters `json:"subscription,omitempty" tf:"subscription,omitempty"`
}

type PublicationObservation struct {
	PublishURL *string `json:"publishUrl,omitempty" tf:"publish_url,omitempty"`
}

type PublicationParameters struct {

	// +kubebuilder:validation:Optional
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// +kubebuilder:validation:Optional
	Published *bool `json:"published,omitempty" tf:"published,omitempty"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SubscriptionObservation struct {
}

type SubscriptionParameters struct {

	// +kubebuilder:validation:Optional
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// +kubebuilder:validation:Optional
	AutomaticSync *bool `json:"automaticSync,omitempty" tf:"automatic_sync,omitempty"`

	// +kubebuilder:validation:Optional
	OnDemand *bool `json:"onDemand,omitempty" tf:"on_demand,omitempty"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// +kubebuilder:validation:Optional
	SubscriptionURL *string `json:"subscriptionUrl,omitempty" tf:"subscription_url,omitempty"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// LibrarySpec defines the desired state of Library
type LibrarySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LibraryParameters `json:"forProvider"`
}

// LibraryStatus defines the observed state of Library.
type LibraryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LibraryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Library is the Schema for the Librarys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vspherejet}
type Library struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LibrarySpec   `json:"spec"`
	Status            LibraryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LibraryList contains a list of Librarys
type LibraryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Library `json:"items"`
}

// Repository type metadata.
var (
	Library_Kind             = "Library"
	Library_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Library_Kind}.String()
	Library_KindAPIVersion   = Library_Kind + "." + CRDGroupVersion.String()
	Library_GroupVersionKind = CRDGroupVersion.WithKind(Library_Kind)
)

func init() {
	SchemeBuilder.Register(&Library{}, &LibraryList{})
}
