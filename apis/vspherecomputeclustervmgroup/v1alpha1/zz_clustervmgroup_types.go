/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterVMGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClusterVMGroupParameters struct {

	// The managed object ID of the cluster.
	// +kubebuilder:validation:Required
	ComputeClusterID *string `json:"computeClusterId" tf:"compute_cluster_id,omitempty"`

	// The UUIDs of the virtual machines in this group.
	// +kubebuilder:validation:Optional
	VirtualMachineIds []*string `json:"virtualMachineIds,omitempty" tf:"virtual_machine_ids,omitempty"`
}

// ClusterVMGroupSpec defines the desired state of ClusterVMGroup
type ClusterVMGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterVMGroupParameters `json:"forProvider"`
}

// ClusterVMGroupStatus defines the observed state of ClusterVMGroup.
type ClusterVMGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterVMGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterVMGroup is the Schema for the ClusterVMGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vspherejet}
type ClusterVMGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterVMGroupSpec   `json:"spec"`
	Status            ClusterVMGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterVMGroupList contains a list of ClusterVMGroups
type ClusterVMGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterVMGroup `json:"items"`
}

// Repository type metadata.
var (
	ClusterVMGroup_Kind             = "ClusterVMGroup"
	ClusterVMGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterVMGroup_Kind}.String()
	ClusterVMGroup_KindAPIVersion   = ClusterVMGroup_Kind + "." + CRDGroupVersion.String()
	ClusterVMGroup_GroupVersionKind = CRDGroupVersion.WithKind(ClusterVMGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterVMGroup{}, &ClusterVMGroupList{})
}
