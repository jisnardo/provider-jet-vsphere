/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterVMDependencyRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClusterVMDependencyRuleParameters struct {

	// The managed object ID of the cluster.
	// +kubebuilder:validation:Required
	ComputeClusterID *string `json:"computeClusterId" tf:"compute_cluster_id,omitempty"`

	// The name of the VM group that this rule depends on. The VMs defined in the group specified by vm_group_name will not be started until the VMs in this group are started.
	// +kubebuilder:validation:Required
	DependencyVMGroupName *string `json:"dependencyVmGroupName" tf:"dependency_vm_group_name,omitempty"`

	// Enable this rule in the cluster.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// When true, prevents any virtual machine operations that may violate this rule.
	// +kubebuilder:validation:Optional
	Mandatory *bool `json:"mandatory,omitempty" tf:"mandatory,omitempty"`

	// The name of the VM group that is the subject of this rule. The VMs defined in this group will not be started until the VMs in the group specified by dependency_vm_group_name are started.
	// +kubebuilder:validation:Required
	VMGroupName *string `json:"vmGroupName" tf:"vm_group_name,omitempty"`
}

// ClusterVMDependencyRuleSpec defines the desired state of ClusterVMDependencyRule
type ClusterVMDependencyRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterVMDependencyRuleParameters `json:"forProvider"`
}

// ClusterVMDependencyRuleStatus defines the observed state of ClusterVMDependencyRule.
type ClusterVMDependencyRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterVMDependencyRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterVMDependencyRule is the Schema for the ClusterVMDependencyRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vspherejet}
type ClusterVMDependencyRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterVMDependencyRuleSpec   `json:"spec"`
	Status            ClusterVMDependencyRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterVMDependencyRuleList contains a list of ClusterVMDependencyRules
type ClusterVMDependencyRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterVMDependencyRule `json:"items"`
}

// Repository type metadata.
var (
	ClusterVMDependencyRule_Kind             = "ClusterVMDependencyRule"
	ClusterVMDependencyRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterVMDependencyRule_Kind}.String()
	ClusterVMDependencyRule_KindAPIVersion   = ClusterVMDependencyRule_Kind + "." + CRDGroupVersion.String()
	ClusterVMDependencyRule_GroupVersionKind = CRDGroupVersion.WithKind(ClusterVMDependencyRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterVMDependencyRule{}, &ClusterVMDependencyRuleList{})
}
