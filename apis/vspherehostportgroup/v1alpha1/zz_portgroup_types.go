/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PortGroupObservation struct {
	ComputedPolicy map[string]*string `json:"computedPolicy,omitempty" tf:"computed_policy,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Ports []PortsObservation `json:"ports,omitempty" tf:"ports,omitempty"`
}

type PortGroupParameters struct {

	// List of active network adapters used for load balancing.
	// +kubebuilder:validation:Optional
	ActiveNics []*string `json:"activeNics,omitempty" tf:"active_nics,omitempty"`

	// Controls whether or not the virtual network adapter is allowed to send network traffic with a different MAC address than that of its own.
	// +kubebuilder:validation:Optional
	AllowForgedTransmits *bool `json:"allowForgedTransmits,omitempty" tf:"allow_forged_transmits,omitempty"`

	// Controls whether or not the Media Access Control (MAC) address can be changed.
	// +kubebuilder:validation:Optional
	AllowMacChanges *bool `json:"allowMacChanges,omitempty" tf:"allow_mac_changes,omitempty"`

	// Enable promiscuous mode on the network. This flag indicates whether or not all traffic is seen on a given port.
	// +kubebuilder:validation:Optional
	AllowPromiscuous *bool `json:"allowPromiscuous,omitempty" tf:"allow_promiscuous,omitempty"`

	// Enable beacon probing. Requires that the vSwitch has been configured to use a beacon. If disabled, link status is used only.
	// +kubebuilder:validation:Optional
	CheckBeacon *bool `json:"checkBeacon,omitempty" tf:"check_beacon,omitempty"`

	// If true, the teaming policy will re-activate failed interfaces higher in precedence when they come back up.
	// +kubebuilder:validation:Optional
	Failback *bool `json:"failback,omitempty" tf:"failback,omitempty"`

	// The managed object ID of the host to set the virtual switch up on.
	// +kubebuilder:validation:Required
	HostSystemID *string `json:"hostSystemId" tf:"host_system_id,omitempty"`

	// If true, the teaming policy will notify the broadcast network of a NIC failover, triggering cache updates.
	// +kubebuilder:validation:Optional
	NotifySwitches *bool `json:"notifySwitches,omitempty" tf:"notify_switches,omitempty"`

	// The average bandwidth in bits per second if traffic shaping is enabled.
	// +kubebuilder:validation:Optional
	ShapingAverageBandwidth *float64 `json:"shapingAverageBandwidth,omitempty" tf:"shaping_average_bandwidth,omitempty"`

	// The maximum burst size allowed in bytes if traffic shaping is enabled.
	// +kubebuilder:validation:Optional
	ShapingBurstSize *float64 `json:"shapingBurstSize,omitempty" tf:"shaping_burst_size,omitempty"`

	// Enable traffic shaping on this virtual switch or port group.
	// +kubebuilder:validation:Optional
	ShapingEnabled *bool `json:"shapingEnabled,omitempty" tf:"shaping_enabled,omitempty"`

	// The peak bandwidth during bursts in bits per second if traffic shaping is enabled.
	// +kubebuilder:validation:Optional
	ShapingPeakBandwidth *float64 `json:"shapingPeakBandwidth,omitempty" tf:"shaping_peak_bandwidth,omitempty"`

	// List of standby network adapters used for failover.
	// +kubebuilder:validation:Optional
	StandbyNics []*string `json:"standbyNics,omitempty" tf:"standby_nics,omitempty"`

	// The network adapter teaming policy. Can be one of loadbalance_ip, loadbalance_srcmac, loadbalance_srcid, or failover_explicit.
	// +kubebuilder:validation:Optional
	TeamingPolicy *string `json:"teamingPolicy,omitempty" tf:"teaming_policy,omitempty"`

	// The name of the virtual switch to bind this port group to.
	// +kubebuilder:validation:Required
	VirtualSwitchName *string `json:"virtualSwitchName" tf:"virtual_switch_name,omitempty"`

	// The VLAN ID/trunk mode for this port group. An ID of 0 denotes no tagging, an ID of 1-4094 tags with the specific ID, and an ID of 4095 enables trunk mode, allowing the guest to manage its own tagging.
	// +kubebuilder:validation:Optional
	VlanID *float64 `json:"vlanId,omitempty" tf:"vlan_id,omitempty"`
}

type PortsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	MacAddresses []*string `json:"macAddresses,omitempty" tf:"mac_addresses,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PortsParameters struct {
}

// PortGroupSpec defines the desired state of PortGroup
type PortGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PortGroupParameters `json:"forProvider"`
}

// PortGroupStatus defines the observed state of PortGroup.
type PortGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PortGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PortGroup is the Schema for the PortGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vspherejet}
type PortGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PortGroupSpec   `json:"spec"`
	Status            PortGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PortGroupList contains a list of PortGroups
type PortGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PortGroup `json:"items"`
}

// Repository type metadata.
var (
	PortGroup_Kind             = "PortGroup"
	PortGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PortGroup_Kind}.String()
	PortGroup_KindAPIVersion   = PortGroup_Kind + "." + CRDGroupVersion.String()
	PortGroup_GroupVersionKind = CRDGroupVersion.WithKind(PortGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&PortGroup{}, &PortGroupList{})
}
